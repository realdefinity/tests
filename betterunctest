local passes, fails, undefined = 0, 0, 0
local running = 0
local credentials = "notdefinity - Join the Discord: https://discord.gg/qeFQ57eqtj"

local function getGlobal(path)
	local value = (getgenv and getgenv() or getfenv(2))
	for token in string.gmatch(path, "[^%.]+") do
		if value then value = value[token] end
	end
	return value
end

local function test(name, aliases, callback, target)
	running = running + 1
	task.spawn(function()
		if not callback then
			print("⏺️ " .. name)
		elseif not getGlobal(name) then
			fails = fails + 1
			warn("⛔ " .. name .. " (global not found)")
		else
			local success, message = pcall(callback)
			name = tostring(name)
			message = tostring(message)
			if success then
				passes = passes + 1
				print("✅ " .. name .. (message ~= "" and " • " .. message or ""))
			else
				fails = fails + 1
				warn("⛔ " .. name .. " failed: " .. message)
			end
		end
		local missing = {}
		for _, alias in ipairs(aliases or {}) do
			if getGlobal(alias) == nil then
				table.insert(missing, alias)
			end
		end
		if #missing > 0 then
			undefined = undefined + 1
			warn("⚠️ Missing aliases: " .. table.concat(missing, ", "))
		end
		running = running - 1
	end)
end

print("\nUNC Environment Check")
print("✅ - Pass, ⛔ - Fail, ⏺️ - No test, ⚠️ - Missing aliases\n")

task.defer(function()
	repeat task.wait() until running == 0
	local total = passes + fails
	local rate = total > 0 and math.floor((passes / total) * 100 + 0.5) or 0
	print("\nUNC Summary")
	print("✅ " .. passes .. " passed, ⛔ " .. fails .. " failed (" .. rate .. "% success)")
	print("⚠️ " .. undefined .. " globals missing aliases")
	print("Test completed. " .. credentials)
end)

local function shallowEqual(t1, t2)
	if t1 == t2 then return true end
	for k, v in pairs(t1) do if t2[k] ~= v then return false end end
	for k, v in pairs(t2) do if t1[k] ~= v then return false end end
	return true
end

test("cache.invalidate", {}, function()
	local container = Instance.new("Folder")
	local part = Instance.new("Part", container)
	cache.invalidate(container:FindFirstChild("Part"))
	assert(part ~= container:FindFirstChild("Part"), "Reference 'part' could not be invalidated")
end)

test("cache.iscached", {}, function()
	local part = Instance.new("Part")
	assert(cache.iscached(part), "Part should be cached")
	cache.invalidate(part)
	assert(not cache.iscached(part), "Part should not be cached after invalidation")
end)

test("cache.replace", {}, function()
	local part = Instance.new("Part")
	local fire = Instance.new("Fire")
	cache.replace(part, fire)
	assert(part ~= fire, "Part was not replaced with Fire")
end)

test("cloneref", {}, function()
	local part = Instance.new("Part")
	local clone = cloneref(part)
	assert(part ~= clone, "Clone should not equal original")
	clone.Name = "Test"
	assert(part.Name == "Test", "Clone should update the original's name")
end)

test("compareinstances", {}, function()
	local part = Instance.new("Part")
	local clone = cloneref(part)
	assert(part ~= clone, "Clone should not equal original")
	assert(compareinstances(part, clone), "Instances should compare equal via compareinstances")
end)

test("checkcaller", {}, function()
	assert(checkcaller(), "Main scope should return true")
end)

test("clonefunction", {}, function()
	local function sample() return "success" end
	local copy = clonefunction(sample)
	assert(sample() == copy(), "Clone should return same value as original")
	assert(sample ~= copy, "Clone should not equal the original function")
end)

test("getcallingscript", {})

test("getscriptclosure", {"getscriptfunction"}, function()
	if type(getscriptclosure) ~= "function" then
		return "getscriptclosure is not supported on this executor."
	end
	local module = game:GetService("CoreGui").RobloxGui.Modules.Common.Constants
	local constants = getrenv().require(module)
	local generated
	local ok, err = pcall(function()
		generated = getscriptclosure(module)()
	end)
	if not ok then
		return "getscriptclosure error: " .. err
	end
	assert(constants ~= generated, "Generated module should not be identical to original")
	assert(shallowEqual(constants, generated), "Generated module should be shallow equal to original")
end)

test("hookfunction", {"replaceclosure"}, function()
	local function sample() return true end
	local original = hookfunction(sample, function() return false end)
	assert(sample() == false, "Hooked function should return false")
	assert(original() == true, "Original function should return true")
	assert(sample ~= original, "Hooked function should differ from original")
end)

test("iscclosure", {}, function()
	assert(iscclosure(print) == true, "print should be a C closure")
	assert(iscclosure(function() end) == false, "Anonymous function should not be a C closure")
end)

test("islclosure", {}, function()
	assert(islclosure(print) == false, "print should not be a Lua closure")
	assert(islclosure(function() end) == true, "Anonymous function should be a Lua closure")
end)

test("isexecutorclosure", {"checkclosure", "isourclosure"}, function()
	assert(isexecutorclosure(isexecutorclosure) == true, "Executor globals should be recognized")
	assert(isexecutorclosure(newcclosure(function() end)) == true, "C closure should be recognized as executor closure")
	assert(isexecutorclosure(function() end) == true, "Lua closure should be recognized as executor closure")
	assert(isexecutorclosure(print) == false, "print should not be recognized as executor closure")
end)

test("loadstring", {}, function()
	local animate = game:GetService("Players").LocalPlayer.Character.Animate
	local bytecode = getscriptbytecode(animate)
	local func = loadstring(bytecode)
	assert(type(func) ~= "function", "Luau bytecode should not be loadable")
	local f, err = loadstring("return ... + 1")
	assert(f(1) == 2, "Simple math failed in loadstring test")
	local f2, err2 = loadstring("f")
	assert(type(f2) ~= "function" and type(err2) == "string", "loadstring should error on invalid code")
end)

test("newcclosure", {}, function()
	local function sample() return true end
	local cclosure = newcclosure(sample)
	assert(sample() == cclosure(), "New C closure should match original output")
	assert(sample ~= cclosure, "New C closure should differ from original")
	assert(iscclosure(cclosure), "New C closure should be a C closure")
end)

test("rconsoleclear", {"consoleclear"})
test("rconsolecreate", {"consolecreate"})
test("rconsoledestroy", {"consoledestroy"})
test("rconsoleinput", {"consoleinput"})
test("rconsoleprint", {"consoleprint"})
test("rconsolesettitle", {"rconsolename", "consolesettitle"})

test("crypt.base64encode", {"crypt.base64.encode", "crypt.base64_encode", "base64.encode", "base64_encode"}, function()
	assert(crypt.base64encode("test") == "dGVzdA==", "Base64 encoding failed")
end)

test("crypt.base64decode", {"crypt.base64.decode", "crypt.base64_decode", "base64.decode", "base64_decode"}, function()
	assert(crypt.base64decode("dGVzdA==") == "test", "Base64 decoding failed")
end)

test("crypt.encrypt", {}, function()
	local key = crypt.generatekey()
	local encrypted, iv = crypt.encrypt("test", key, nil, "CBC")
	assert(iv, "crypt.encrypt should return an IV")
	local decrypted = crypt.decrypt(encrypted, key, iv, "CBC")
	assert(decrypted == "test", "Decryption failed for encrypted data")
end)

test("crypt.decrypt", {}, function()
	local key, iv = crypt.generatekey(), crypt.generatekey()
	local encrypted = crypt.encrypt("test", key, iv, "CBC")
	local decrypted = crypt.decrypt(encrypted, key, iv, "CBC")
	assert(decrypted == "test", "Decryption failed for encrypted data")
end)

test("crypt.generatebytes", {}, function()
	local size = math.random(10, 100)
	local bytes = crypt.generatebytes(size)
	local decoded = crypt.base64decode(bytes)
	assert(#decoded == size, "Decoded byte length mismatch: expected " .. size .. ", got " .. #decoded)
end)

test("crypt.generatekey", {}, function()
	local key = crypt.generatekey()
	local decoded = crypt.base64decode(key)
	assert(#decoded == 32, "Generated key should be 32 bytes long when decoded")
end)

test("crypt.hash", {}, function()
	local algorithms = {'sha1', 'sha384', 'sha512', 'md5', 'sha256', 'sha3-224', 'sha3-256', 'sha3-512'}
	for _, alg in ipairs(algorithms) do
		local hash = crypt.hash("test", alg)
		assert(hash, "Hashing failed for algorithm: " .. alg)
	end
end)

test("debug.getconstant", {}, function()
	local function sample() print("Hello, world!") end
	assert(debug.getconstant(sample, 1) == "print", "First constant should be 'print'")
	assert(debug.getconstant(sample, 3) == "Hello, world!", "Third constant should be 'Hello, world!'")
end)

test("debug.getconstants", {}, function()
	local function sample() local num = 5000 .. 50000; print("Hello, world!", num, warn) end
	local constants = debug.getconstants(sample)
	assert(constants[2] == "print", "Second constant should be 'print'")
	assert(constants[4] == "Hello, world!", "Fourth constant should be 'Hello, world!'")
	assert(constants[5] == "warn", "Fifth constant should be 'warn'")
end)

test("debug.getinfo", {}, function()
	local expected = { source = "string", short_src = "string", func = "function", what = "string", currentline = "number", name = "string", nups = "number", numparams = "number", is_vararg = "number" }
	local function sample(...) print(...) end
	local info = debug.getinfo(sample)
	for k, typ in pairs(expected) do
		assert(info[k] ~= nil, "Missing field '" .. k .. "' in debug.getinfo")
		assert(type(info[k]) == typ, "Field '" .. k .. "' is not of type " .. typ)
	end
end)

test("debug.getproto", {}, function()
	local function sample() local function inner() return true end end
	local proto = debug.getproto(sample, 1, true)[1]
	local realProto = debug.getproto(sample, 1)
	assert(proto, "Failed to retrieve inner function via debug.getproto")
	assert(proto() == true, "Inner function did not return expected value")
	if not realProto() then
		return "Proto return values disabled on this executor"
	end
end)

test("debug.getprotos", {}, function()
	local function sample()
		local function inner1() return true end
		local function inner2() return true end
		local function inner3() return true end
	end
	for i in ipairs(debug.getprotos(sample)) do
		local proto = debug.getproto(sample, i, true)[1]
		local realProto = debug.getproto(sample, i)
		assert(proto(), "Failed to retrieve inner function " .. i)
		if not realProto() then
			return "Proto return values disabled on this executor"
		end
	end
end)

test("debug.getstack", {}, function()
	local _ = "a" .. "b"
	local stackItem = debug.getstack(1, 1)
	assert(stackItem == "ab", "Expected first stack item to be 'ab'")
	local stackTable = debug.getstack(1)
	assert(stackTable[1] == "ab", "Expected first item in stack table to be 'ab'")
end)

test("debug.getupvalue", {}, function()
	local upvalue = function() end
	local function sample() print(upvalue) end
	assert(debug.getupvalue(sample, 1) == upvalue, "Unexpected upvalue from debug.getupvalue")
end)

test("debug.getupvalues", {}, function()
	local upvalue = function() end
	local function sample() print(upvalue) end
	local ups = debug.getupvalues(sample)
	assert(ups[1] == upvalue, "Unexpected upvalue from debug.getupvalues")
end)

test("debug.setconstant", {}, function()
	local function sample() return "fail" end
	debug.setconstant(sample, 1, "success")
	assert(sample() == "success", "Failed to set constant via debug.setconstant")
end)

test("debug.setstack", {}, function()
	local function sample() return "fail", debug.setstack(1, 1, "success") end
	assert(sample() == "success", "Failed to set stack item via debug.setstack")
end)

test("debug.setupvalue", {}, function()
	local function upvalue() return "fail" end
	local function sample() return upvalue() end
	debug.setupvalue(sample, 1, function() return "success" end)
	assert(sample() == "success", "Failed to set upvalue via debug.setupvalue")
end)

if isfolder and makefolder and delfolder then
	if isfolder(".tests") then delfolder(".tests") end
	makefolder(".tests")
end

test("readfile", {}, function()
	writefile(".tests/readfile.txt", "success")
	assert(readfile(".tests/readfile.txt") == "success", "Failed to read file contents")
end)

test("listfiles", {}, function()
	makefolder(".tests/listfiles")
	writefile(".tests/listfiles/test_1.txt", "success")
	writefile(".tests/listfiles/test_2.txt", "success")
	local files = listfiles(".tests/listfiles")
	assert(#files == 2, "listfiles returned incorrect file count")
	assert(isfile(files[1]), "listfiles did not return file path")
	assert(readfile(files[1]) == "success", "listfiles did not return correct file contents")
	makefolder(".tests/listfiles_2")
	makefolder(".tests/listfiles_2/test_1")
	makefolder(".tests/listfiles_2/test_2")
	local folders = listfiles(".tests/listfiles_2")
	assert(#folders == 2, "listfiles returned incorrect folder count")
	assert(isfolder(folders[1]), "listfiles did not return folder path")
end)

test("writefile", {}, function()
	writefile(".tests/writefile.txt", "success")
	assert(readfile(".tests/writefile.txt") == "success", "writefile did not write file correctly")
	local status = pcall(function()
		writefile(".tests/writefile", "success")
		assert(isfile(".tests/writefile.txt"))
	end)
	if not status then return "Executor requires file extension for writefile" end
end)

test("makefolder", {}, function()
	makefolder(".tests/makefolder")
	assert(isfolder(".tests/makefolder"), "Failed to create folder")
end)

test("appendfile", {}, function()
	writefile(".tests/appendfile.txt", "su")
	appendfile(".tests/appendfile.txt", "cce")
	appendfile(".tests/appendfile.txt", "ss")
	assert(readfile(".tests/appendfile.txt") == "success", "appendfile did not append correctly")
end)

test("isfile", {}, function()
	writefile(".tests/isfile.txt", "success")
	assert(isfile(".tests/isfile.txt") == true, "isfile did not return true for a file")
	assert(isfile(".tests") == false, "isfile returned true for a folder")
	assert(isfile(".tests/doesnotexist.exe") == false, "isfile returned true for a non-existent file")
end)

test("isfolder", {}, function()
	assert(isfolder(".tests") == true, "isfolder did not return true for a folder")
	assert(isfolder(".tests/doesnotexist.exe") == false, "isfolder returned true for a non-existent path")
end)

test("delfolder", {}, function()
	makefolder(".tests/delfolder")
	delfolder(".tests/delfolder")
	assert(isfolder(".tests/delfolder") == false, "delfolder failed to delete folder")
end)

test("delfile", {}, function()
	writefile(".tests/delfile.txt", "Hello, world!")
	delfile(".tests/delfile.txt")
	assert(isfile(".tests/delfile.txt") == false, "delfile failed to delete file")
end)

test("dofile", {})

test("isrbxactive", {"isgameactive"}, function()
	assert(type(isrbxactive()) == "boolean", "isrbxactive did not return a boolean")
end)
test("mouse1click", {})
test("mouse1press", {})
test("mouse1release", {})
test("mouse2click", {})
test("mouse2press", {})
test("mouse2release", {})
test("mousemoveabs", {})
test("mousescroll", {})

test("fireclickdetector", {}, function()
	local detector = Instance.new("ClickDetector")
	fireclickdetector(detector, 50, "MouseHoverEnter")
end)

test("getcallbackvalue", {}, function()
	local bindable = Instance.new("BindableFunction")
	local function sample() end
	bindable.OnInvoke = sample
	assert(getcallbackvalue(bindable, "OnInvoke") == sample, "getcallbackvalue did not return correct value")
end)

test("getconnections", {}, function()
	local expected = { Enabled = "boolean", ForeignState = "boolean", LuaConnection = "boolean", Function = "function", Thread = "thread", Fire = "function", Defer = "function", Disconnect = "function", Disable = "function", Enable = "function" }
	local bindable = Instance.new("BindableEvent")
	bindable.Event:Connect(function() end)
	local connection = getconnections(bindable.Event)[1]
	for k, typ in pairs(expected) do
		assert(connection[k] ~= nil, "Missing field '" .. k .. "' in connection")
		assert(type(connection[k]) == typ, "Field '" .. k .. "' is not type " .. typ)
	end
end)

test("replicatesignal", {}, function()
	if type(replicatesignal) ~= "function" then
		return "replicatesignal is not supported on this executor."
	end
	local receivedArgs = {}
	local bindable = Instance.new("BindableEvent")
	bindable.Event:Connect(function(...)
		receivedArgs = {...}
	end)
	replicatesignal(bindable, "arg1", 42, { key = "value" })
	task.wait(0.1)
	assert(#receivedArgs == 3, "replicatesignal did not fire the event with the correct number of arguments")
	assert(receivedArgs[1] == "arg1", "First argument mismatch in replicatesignal")
	assert(receivedArgs[2] == 42, "Second argument mismatch in replicatesignal")
	assert(type(receivedArgs[3]) == "table" and receivedArgs[3].key == "value", "Third argument mismatch in replicatesignal")
end)

test("getcustomasset", {}, function()
	writefile(".tests/getcustomasset.txt", "success")
	local asset = getcustomasset(".tests/getcustomasset.txt")
	assert(type(asset) == "string", "getcustomasset did not return a string")
	assert(#asset > 0, "getcustomasset returned an empty string")
	assert(string.sub(asset, 1, 10) == "rbxasset://", "getcustomasset did not return a valid rbxasset URL")
end)

test("gethiddenproperty", {}, function()
	local fire = Instance.new("Fire")
	local prop, hidden = gethiddenproperty(fire, "size_xml")
	assert(prop == 5, "gethiddenproperty did not return correct value")
	assert(hidden == true, "gethiddenproperty did not indicate property is hidden")
end)

test("sethiddenproperty", {}, function()
	local fire = Instance.new("Fire")
	local result = sethiddenproperty(fire, "size_xml", 10)
	assert(result, "sethiddenproperty did not return true")
	assert(gethiddenproperty(fire, "size_xml") == 10, "sethiddenproperty did not set the property")
end)

test("gethui", {}, function()
	assert(typeof(gethui()) == "Instance", "gethui did not return an Instance")
end)

test("getinstances", {}, function()
	local inst = getinstances()
	assert(type(inst) == "table", "getinstances did not return a table")
	assert(#inst > 0, "getinstances returned an empty table")
	assert(inst[1]:IsA("Instance"), "First value from getinstances is not an Instance")
end)

test("getnilinstances", {}, function()
	local nilInst = getnilinstances()
	assert(type(nilInst) == "table", "getnilinstances did not return a table")
	assert(#nilInst > 0, "getnilinstances returned an empty table")
	assert(nilInst[1]:IsA("Instance"), "First value from getnilinstances is not an Instance")
	assert(nilInst[1].Parent == nil, "First value from getnilinstances is not parented to nil")
end)

test("isscriptable", {}, function()
	local fire = Instance.new("Fire")
	assert(isscriptable(fire, "size_xml") == false, "isscriptable did not return false for non-scriptable property")
	assert(isscriptable(fire, "Size") == true, "isscriptable did not return true for scriptable property")
end)

test("setscriptable", {}, function()
	local fire = Instance.new("Fire")
	local was = setscriptable(fire, "size_xml", true)
	assert(was == false, "setscriptable did not return false for non-scriptable property")
	assert(isscriptable(fire, "size_xml") == true, "setscriptable did not set the property")
	fire = Instance.new("Fire")
	assert(isscriptable(fire, "size_xml") == false, "setscriptable persisted between instances")
end)

test("setrbxclipboard", {})

test("getrawmetatable", {}, function()
	local mt = { __metatable = "Locked!" }
	local obj = setmetatable({}, mt)
	assert(getrawmetatable(obj) == mt, "getrawmetatable did not return the correct metatable")
end)

test("hookmetamethod", {}, function()
	local obj = setmetatable({}, { __index = newcclosure(function() return false end), __metatable = "Locked!" })
	local ref = hookmetamethod(obj, "__index", function() return true end)
	assert(obj.test == true, "hookmetamethod did not change the return value")
	assert(ref() == false, "hookmetamethod did not return the original function")
end)

test("getnamecallmethod", {}, function()
	local method
	local ref
	ref = hookmetamethod(game, "__namecall", function(...)
		if not method then method = getnamecallmethod() end
		return ref(...)
	end)
	game:GetService("Lighting")
	assert(method == "GetService", "getnamecallmethod did not return 'GetService'")
end)

test("isreadonly", {}, function()
	local obj = {}
	table.freeze(obj)
	assert(isreadonly(obj), "isreadonly did not return true for a frozen table")
end)

test("setrawmetatable", {}, function()
	local obj = setmetatable({}, { __index = function() return false end, __metatable = "Locked!" })
	local ret = setrawmetatable(obj, { __index = function() return true end })
	assert(obj, "setrawmetatable did not return the original object")
	assert(obj.test == true, "setrawmetatable failed to modify the metatable")
	if ret then
		return ret == obj and "Returned the original object" or "Did not return the original object"
	end
end)

test("setreadonly", {}, function()
	local obj = { success = false }
	table.freeze(obj)
	setreadonly(obj, false)
	obj.success = true
	assert(obj.success, "setreadonly did not allow modification of the table")
end)

test("identifyexecutor", {"getexecutorname"}, function()
	local name, version = identifyexecutor()
	assert(type(name) == "string", "identifyexecutor did not return a string for name")
	return type(version) == "string" and "Version: " .. version or "No version provided"
end)

test("lz4compress", {}, function()
	local raw = "Hello, world!"
	local compressed = lz4compress(raw)
	assert(type(compressed) == "string", "lz4compress did not return a string")
	assert(lz4decompress(compressed, #raw) == raw, "lz4decompress did not return the original string")
end)

test("lz4decompress", {}, function()
	local raw = "Hello, world!"
	local compressed = lz4compress(raw)
	assert(type(compressed) == "string", "lz4compress did not return a string")
	assert(lz4decompress(compressed, #raw) == raw, "lz4decompress did not return the original string")
end)

test("messagebox", {})

test("queue_on_teleport", {"queueonteleport"})

test("request", {"http.request", "http_request"}, function()
	local response = request({
		Url = "https://httpbin.org/user-agent",
		Method = "GET",
	})
	assert(type(response) == "table", "request did not return a table")
	assert(response.StatusCode == 200, "request did not return a 200 status code")
	local data = game:GetService("HttpService"):JSONDecode(response.Body)
	assert(type(data) == "table" and type(data["user-agent"]) == "string", "request did not return valid user-agent data")
	return "User-Agent: " .. data["user-agent"]
end)

test("setclipboard", {"toclipboard"})

test("setfpscap", {}, function()
	local renderStepped = game:GetService("RunService").RenderStepped
	local function step()
		renderStepped:Wait()
		local sum = 0
		for _ = 1, 5 do
			sum = sum + 1 / renderStepped:Wait()
		end
		return math.floor(sum / 5 + 0.5)
	end
	setfpscap(60)
	local fps60 = step()
	setfpscap(0)
	local fps0 = step()
	return fps60 .. " fps @60 • " .. fps0 .. " fps @0"
end)

test("getgc", {}, function()
	local gc = getgc()
	assert(type(gc) == "table", "getgc did not return a table")
	assert(#gc > 0, "getgc returned an empty table")
end)

test("getgenv", {}, function()
	getgenv().__TEST_GLOBAL = true
	assert(__TEST_GLOBAL, "Failed to set global via getgenv")
	getgenv().__TEST_GLOBAL = nil
end)

test("getloadedmodules", {}, function()
	local modules = getloadedmodules()
	assert(type(modules) == "table", "getloadedmodules did not return a table")
	assert(#modules > 0, "getloadedmodules returned an empty table")
	assert(typeof(modules[1]) == "Instance", "First module is not an Instance")
	assert(modules[1]:IsA("ModuleScript"), "First module is not a ModuleScript")
end)

test("getrenv", {}, function()
	assert(_G ~= getrenv()._G, "getrenv did not return a separate global environment")
end)

test("getrunningscripts", {}, function()
	local scripts = getrunningscripts()
	assert(type(scripts) == "table", "getrunningscripts did not return a table")
	assert(#scripts > 0, "getrunningscripts returned an empty table")
	assert(typeof(scripts[1]) == "Instance", "First running script is not an Instance")
	assert(scripts[1]:IsA("ModuleScript") or scripts[1]:IsA("LocalScript"), "First running script is not a ModuleScript or LocalScript")
end)

test("getscriptbytecode", {"dumpstring"}, function()
	local animate = game:GetService("Players").LocalPlayer.Character.Animate
	local bytecode = getscriptbytecode(animate)
	assert(type(bytecode) == "string", "getscriptbytecode did not return a string")
end)

test("getscripthash", {}, function()
	local animate = game:GetService("Players").LocalPlayer.Character.Animate:Clone()
	local hash = getscripthash(animate)
	local source = animate.Source
	animate.Source = "print('Hello, world!')"
	task.defer(function() animate.Source = source end)
	local newHash = getscripthash(animate)
	assert(hash ~= newHash, "getscripthash did not change when script was modified")
	assert(newHash == getscripthash(animate), "getscripthash is not consistent for same source")
end)

test("getscripts", {}, function()
	local scripts = getscripts()
	assert(type(scripts) == "table", "getscripts did not return a table")
	assert(#scripts > 0, "getscripts returned an empty table")
	assert(typeof(scripts[1]) == "Instance", "First script is not an Instance")
	assert(scripts[1]:IsA("ModuleScript") or scripts[1]:IsA("LocalScript"), "First script is not a ModuleScript or LocalScript")
end)

test("getsenv", {}, function()
	local animate = game:GetService("Players").LocalPlayer.Character.Animate
	local env = getsenv(animate)
	assert(type(env) == "table", "getsenv did not return a table")
	assert(env.script == animate, "getsenv did not return correct environment")
end)

test("getthreadidentity", {"getidentity", "getthreadcontext"}, function()
	assert(type(getthreadidentity()) == "number", "getthreadidentity did not return a number")
end)

test("setthreadidentity", {"setidentity", "setthreadcontext"}, function()
	setthreadidentity(3)
	assert(getthreadidentity() == 3, "setthreadidentity did not set thread identity")
end)

test("Drawing", {})

test("Drawing.new", {}, function()
	local drawing = Drawing.new("Square")
	drawing.Visible = false
	local ok, err = pcall(function() drawing:Destroy() end)
	assert(ok, "Drawing:Destroy() threw an error")
end)

test("Drawing.Fonts", {}, function()
	assert(Drawing.Fonts.UI == 0, "Drawing.Fonts.UI is incorrect")
	assert(Drawing.Fonts.System == 1, "Drawing.Fonts.System is incorrect")
	assert(Drawing.Fonts.Plex == 2, "Drawing.Fonts.Plex is incorrect")
	assert(Drawing.Fonts.Monospace == 3, "Drawing.Fonts.Monospace is incorrect")
end)

test("isrenderobj", {}, function()
	local drawing = Drawing.new("Image")
	drawing.Visible = true
	assert(isrenderobj(drawing) == true, "isrenderobj did not return true for an Image")
	assert(isrenderobj(newproxy()) == false, "isrenderobj did not return false for a blank proxy")
end)

test("getrenderproperty", {}, function()
	local drawing = Drawing.new("Image")
	drawing.Visible = true
	local val = getrenderproperty(drawing, "Visible")
	assert(type(val) == "boolean", "getrenderproperty did not return a boolean for Visible")
	local ok, result = pcall(function() return getrenderproperty(drawing, "Color") end)
	if not ok or result == nil then return "Image.Color not supported" end
end)

test("setrenderproperty", {}, function()
	local drawing = Drawing.new("Square")
	drawing.Visible = true
	setrenderproperty(drawing, "Visible", false)
	assert(drawing.Visible == false, "setrenderproperty did not update Visible")
end)

test("cleardrawcache", {}, function()
	cleardrawcache()
end)

test("WebSocket", {})

test("WebSocket.connect", {}, function()
	local expected = { Send = "function", Close = "function", OnMessage = {"table", "userdata"}, OnClose = {"table", "userdata"} }
	local ws = WebSocket.connect("ws://echo.websocket.events")
	assert(type(ws) == "table" or type(ws) == "userdata", "WebSocket.connect did not return a table or userdata")
	for k, typ in pairs(expected) do
		if type(typ) == "table" then
			assert(table.find(typ, type(ws[k])), "WebSocket." .. k .. " is not one of expected types")
		else
			assert(type(ws[k]) == typ, "WebSocket." .. k .. " is not a " .. typ)
		end
	end
	ws:Close()
end)
