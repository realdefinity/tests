local tick, taskWait, sqrt, ceil, floor, sort, huge = tick, task.wait, math.sqrt, math.ceil, math.floor, table.sort, math.huge

local config = {
    overheadIterations = 100000,
    warmupIterations = 10000,
    testIterations = 1000000,
    progressInterval = 10000,
    waitTime = 0.1,
    gcBeforeTest = true,
    priority = Enum.ThreadPriority.High
}

--  logging with timing
local function log(message, immediate)
    print(string.format("[%.4f] %s", tick(), message))
    if not immediate then taskWait(config.waitTime) end
end

-- More precise overhead measurement with statistical filtering
local function measureTickOverhead(iterations)
    local samples = table.create(iterations)
    for i = 1, iterations do
        local s = tick()
        local e = tick()
        samples[i] = e - s
    end
    
    -- remove outliers
    sort(samples)
    local q1 = samples[floor(iterations*0.25)]
    local q3 = samples[floor(iterations*0.75)]
    local iqr = q3 - q1
    local lowerBound = q1 - 1.5*iqr
    local upperBound = q3 + 1.5*iqr
    
    local total, count = 0, 0
    for i = 1, iterations do
        local v = samples[i]
        if v >= lowerBound and v <= upperBound then
            total = total + v
            count = count + 1
        end
    end
    
    return total / count, samples[1]  -- Return average and minimum
end

-- test cases
local testCases = {
    {
        name = "Math Operations",
        func = function()
            local sum = 0
            for i = 1, 100 do
                sum = sum + sqrt(i) * i^0.5 + i%10
            end
            return sum
        end
    },
    {
        name = "Table Operations",
        func = function()
            local t = table.create(100, 0)
            for i = 1, 100 do
                t[i] = i
            end
            for i = 1, 50 do
                table.remove(t, 1)
            end
            return #t
        end
    },
    {
        name = "String Manipulation",
        func = function()
            local s = ""
            for i = 1, 100 do
                s = s .. string.char((i%26)+65)
            end
            return #s
        end
    }
}

-- Warmup
local function runWarmup(iterations)
    log("Phase 1: Basic warmup ("..floor(iterations*0.3).." iterations)", true)
    for i = 1, iterations*0.3 do
        testCases[1].func()
    end
    
    log("Phase 2: Full warmup ("..floor(iterations*0.7).." iterations)", true)
    for i = 1, iterations*0.7 do
        for _, test in ipairs(testCases) do
            test.func()
        end
    end
end

-- test runner
local function runTest(testCase, iterations, tickOverhead)
    local times = table.create(iterations)
    local testStart = tick()
    
    for i = 1, iterations do
        local start = tick()
        testCase.func()
        local elapsed = tick() - start - tickOverhead
        times[i] = elapsed > 0 and elapsed or 0
        
        if i % config.progressInterval == 0 then
            log(string.format("üèÅ %s: %d/%d (%.1f%%)", 
                testCase.name, i, iterations, i/iterations*100), true)
        end
    end
    
    return times, tick() - testStart
end

-- Statistical analysis
local function analyzeResults(times, iterations)
    -- Initial pass for basic stats
    local total, min, max = 0, huge, 0
    for i = 1, iterations do
        local t = times[i]
        total = total + t
        if t < min then min = t end
        if t > max then max = t end
    end
    local avg = total / iterations
    
    -- Sort for percentiles
    sort(times)
    
    -- Calculate percentiles
    local percentiles = {}
    for _, p in ipairs({0.5, 0.9, 0.95, 0.99, 0.999, 0.9999}) do
        local index = ceil(iterations * p)
        percentiles[p*100] = times[index]
    end
    
    -- Calculate variance and deviation
    local sumSqDiff, sumAbsDiff = 0, 0
    for i = 1, iterations do
        local diff = times[i] - avg
        sumSqDiff = sumSqDiff + diff * diff
        sumAbsDiff = sumAbsDiff + math.abs(diff)
    end
    
    local variance = sumSqDiff / iterations
    local stdev = sqrt(variance)
    local mad = sumAbsDiff / iterations
    
    return {
        iterations = iterations,
        totalTime = total,
        average = avg,
        minimum = min,
        maximum = max,
        median = percentiles[50],
        percentiles = percentiles,
        variance = variance,
        standardDeviation = stdev,
        meanAbsDeviation = mad,
        coefficientVariation = (avg > 0) and (stdev/avg)*100 or 0
    }
end

-- time formatting
local timeUnits = {
    {1e-9, "ns"},
    {1e-6, "Œºs"},
    {1e-3, "ms"},
    {1, "s"},
    {60, "min"},
    {3600, "hr"}
}

local function formatDuration(seconds)
    if seconds <= 0 then return "0s" end
    
    for i = #timeUnits, 1, -1 do
        local unit = timeUnits[i]
        if seconds >= unit[1] then
            return string.format("%.3f%s", seconds/unit[1], unit[2])
        end
    end
    return string.format("%.3gs", seconds)
end

-- result presentation
local function printResults(testName, results)
    local divider = "‚ïê"..string.rep("‚ïê", 38).."‚ïê"
    
    print(divider)
    print(string.format("‚ïë %-38s ‚ïë", "RESULTS: "..testName))
    print(divider)
    
    local function printRow(label, value)
        print(string.format("‚ïë %-20s %16s ‚ïë", label..":", value))
    end
    
    printRow("Iterations", tostring(results.iterations))
    printRow("Total Time", formatDuration(results.totalTime))
    printRow("Average", formatDuration(results.average))
    printRow("Minimum", formatDuration(results.minimum))
    printRow("Maximum", formatDuration(results.maximum))
    printRow("Median", formatDuration(results.median))
    print(divider)
    printRow("Standard Deviation", formatDuration(results.standardDeviation))
    printRow("Variance", formatDuration(results.variance))
    printRow("Mean Abs Dev", formatDuration(results.meanAbsDeviation))
    printRow("Coef of Variation", string.format("%.2f%%", results.coefficientVariation))
    print(divider)
    
    for p, v in pairs(results.percentiles) do
        printRow(p.."th Percentile", formatDuration(v))
    end
    
    print(divider)
    print(string.format("‚ïë %-38s ‚ïë", "Iterations/sec: "..formatDuration(results.iterations/results.totalTime)))
    print(divider.."\n")
end

-- Main execution flow
local function main()
    -- Set thread priority if supported
    if setthreadpriority then
        setthreadpriority(config.priority)
    end
    
    -- Measure environment
    log("üöÄ Starting performance evaluation", true)
    log("Environment: "..(identifyexecutor and identifyexecutor() or "Unknown"))
    
    -- Measure tick 
    log("‚è±Ô∏è Measuring tick() overhead...")
    local tickAvg, tickMin = measureTickOverhead(config.overheadIterations)
    log(string.format("‚úÖ Tick overhead: avg=%s min=%s", 
        formatDuration(tickAvg), formatDuration(tickMin)))
    
    -- garbage collection
    if config.gcBeforeTest then
        log("üßπ Running garbage collection...", true)
        collectgarbage("collect")
    end
    
    -- warmup sequence
    log("üî• Warming up ("..config.warmupIterations.." iterations)")
    runWarmup(config.warmupIterations)
    
    -- Run all test cases
    for _, testCase in ipairs(testCases) do
        log("\nüß™ Testing: "..testCase.name)
        local times, duration = runTest(testCase, config.testIterations, tickAvg)
        local results = analyzeResults(times, config.testIterations)
        printResults(testCase.name, results)
    end
    
    -- Final
    log("üéâ All tests completed!")
    if setclipboard then
        setclipboard("Performance tests completed at: "..os.date())
        log("üìã Results timestamp copied to clipboard")
    end
end

-- Error handling
local success, err = pcall(main)
if not success then
    print("‚ùå Critical error:", err)
    if sendNotification then
        sendNotification("Test Failed", "Check console for errors", 10)
    end
end
